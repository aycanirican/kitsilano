;; -*- mode: Lisp -*-

(let ((gc-cons-threshold 1000000)) ; delay gc
  (setq inhibit-startup-message t
	inhibit-startup-echo-area-message (user-login-name))
  
  (setq initial-major-mode 'fundamental-mode
	initial-scratch-message nil)
  
  (package-initialize)

  (tool-bar-mode -1)   ;; hide toolbar (waste of space)
  (menu-bar-mode -1)   ;; hide menubar (come on, we use keyboard)
  (scroll-bar-mode -1) ;; hide scrollbar (old ux)
  (blink-cursor-mode 0)

  ;; Set up fonts early.
  (set-face-attribute 'default        nil :height 140 :family "Menlo")
  
  (when window-system
    (set-frame-position (selected-frame) 250 0)
    (set-frame-size (selected-frame) 130 80))
    
  (load-theme 'tango-dark)
  
  ;; We list all the parameters externally given us by the build system
  ;; here. 
  (setq diff-path "@DIFF_PATH@")   ; needed by ediff
  (setq patch-path "@PATCH_PATH@") ; needed by ediff
  (setq mu-path "@MU_PATH@")       ; needed by mu4e
  (setq dhall-path "@DHALL_PATH@") ; needed by emacs dhall-mode
  (setq mu4e-path (concat mu-path "/share/emacs/site-lisp/mu4e"))
  (setq ripgrep-path "@RG_PATH@")  ; used by counsel-rg-base-command
  (setq ispell-path "@ISPELL_PATH@")
  (setq sbcl-path "@SBCL_PATH@")   ; for slime
  (setq stack-path "@STACK_PATH@") ; stack
  (setq hls-path "@HLS_PATH@")     ; haskell-language-server

  ;; Common-Lisp
  (add-to-list 'load-path "@SLIME_PATH@")
  (require 'slime-autoloads)
  (setq inferior-lisp-program (concat sbcl-path "/bin/sbcl"))

  ;; ediff
  (setq ediff-diff-program    (concat diff-path  "/bin/diff")
	ediff-diff3-program   (concat diff-path  "/bin/diff3")
	ediff-patch-program   (concat patch-path "/bin/patch")
	dhall-command         (concat dhall-path "/bin/dhall")
	inferior-lisp-program (concat sbcl-path "/bin/sbcl"))

  ;; nix mode is essential for our community
  (use-package nix-mode
    :mode ("\\.nix\\'" "\\.nix.in\\'"))
  (use-package nix-drv-mode
    :ensure nix-mode
    :mode "\\.drv\\'")
  (use-package nix-shell
    :ensure nix-mode
    :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
  (use-package nix-repl
    :ensure nix-mode
    :commands (nix-repl))

  ;; AVY
  ;; a few changes to goto keys
  (require 'avy)
  (global-set-key (kbd "C-c C-j") 'avy-resume)
  (global-set-key (kbd "C-x ;"  ) 'avy-goto-char)
  (global-set-key (kbd "C-x '"  ) 'avy-goto-char-2)

  ;; MULTICURSOR
					; meta up down is working on macbook
  (require 'multiple-cursors)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)

  (with-eval-after-load 'multiple-cursors-core
    (define-key mc/keymap (kbd "M-T") 'mc/reverse-regions)
    (define-key mc/keymap (kbd "C-,") 'mc/unmark-next-like-this)
    (define-key mc/keymap (kbd "C-.") 'mc/skip-to-next-like-this))


  ;; AUTOCOMPLETE
  (progn
    (ido-mode 1)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c k") 'counsel-rg)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    ;; ;; enable fuzzy match
    ;; (setq ivy-re-builders-alist
    ;;     '((t . ivy--regex-fuzzy)))
    (setq counsel-rg-base-command (concat ripgrep-path "/bin/rg -S --no-heading --line-number --color never %s .")))

  ;; git ui
  (require 'magit)
  (setq magit-completing-read-function 'ivy-completing-read)

  ;; project scope
  (require 'projectile)
  (setq projectile-completion-system 'ivy)
  
  ;; company mode
  (require 'company)
  
  ;; undo
  (global-undo-tree-mode 1)

  ;; use tmp for backup and autosave
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
	backup-directory-alist         `((".*" . ,temporary-file-directory)))

  ;; ORG
  (require 'org)
  (setq org-export-backends '(ascii html icalendar latex md))
  ;; mu4e
  (add-to-list 'load-path mu4e-path)
  (require 'org-mime)
  (require 'mu4e)
  (require 'mu4e-contrib)

  (setq mu4e-mu-binary (concat mu-path "/bin/mu"))

  (add-hook 'message-mode-hook 'flyspell-mode)
  (add-hook 'mu4e-compose-mode-hook
	    (lambda ()
	      (progn (auto-fill-mode -1)
		     (set-visual-wrap-column '80)
		     (flyspell-mode))))

  (defun org-mime-org-buffer-htmlize ()
    "Create an email buffer containing the current org-mode file
exported to html and encoded in both html and in org formats as
mime alternatives."
    (interactive)
    (org-mime-send-buffer 'html)
    (message-goto-to))

  (setq mu4e-headers-fields
	'( (:human-date     .  15)    ;; alternatively, use :human-date
	   (:flags          .   6)
	   (:from           .  25)
	   (:thread-subject .  nil)))

  ;; Dispatch by os
  (let ((is-mac (string-equal system-type "darwin")))
    (when is-mac
      (setq mac-allow-anti-aliasing t)
      (setq delete-by-moving-to-trash t)
      (setq trash-directory "~/.Trash")
      (setq ns-pop-up-frames nil)
      (setq ns-use-native-fullscreen nil)
      (setq mac-option-modifier 'super) ;; Bind super to OPTION KEY
      (setq mac-right-option-modifier 'nil)
      (setq mac-command-modifier 'meta) ;; Bind meta to COMMAND KEY
      (setq mac-right-command-modifier 'super) ;; Bind apple/command to super if you want
      ; (setq mac-function-modifier 'hyper) ;; Bind function key to hyper if you want
      ))
  
  ;; Include user supplied customizations
  (let ((customs (expand-file-name "~/.kits.el")))
    (if (file-exists-p customs)
	(load-file customs)
      (message "Customization file not found: %s" customs)))

  ;; ace window for easy switching between windows
  (require 'ace-window)
  (global-set-key (kbd "M-o") 'ace-window)

  ;; always show matching parens
  (show-paren-mode 1)
  (require 'rainbow-delimiters)
  
  ;; company
  (add-to-list 'company-backends 'company-ghc)

  ;; golang speedbar support
  (eval-after-load 'speedbar
    '(speedbar-add-supported-extension ".go"))
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)

  ;; autoinsert
  (require 'autoinsert)
  (auto-insert-mode)

  (setq auto-insert-directory (expand-file-name "~/.emacs.d/templates/"))

  ;; yasnippet
  (require 'yasnippet)
  (yas-global-mode 1)

  ;; Setup LSP
  (require 'lsp-mode)
  
  ;; haskell
  (require 'lsp)
  (require 'lsp-haskell)
  (add-hook 'haskell-mode-hook #'lsp)
  (setq lsp-haskell-process-path-hie (concat hls-path  "/bin/haskell-language-server-wrapper")
        lsp-haskell-process-args-hie (list "-d" "-l" (make-temp-file "hie." nil ".log"))
	lsp-lens-mode t)

  (require 'haskell-mode)
  (require 'haskell-font-lock)
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (require 'yasnippet)
  
  ;; (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  ;; (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)
  ;; (add-hook 'haskell-mode-hook 'flyspell-prog-mode)
  ;; (define-key haskell-mode-map (kbd "<f8>") 'haskell-navigate-imports)
  
  (require 'ido)
  (require 'ido-better-flex)
  (ido-better-flex/enable)
  
  (setq haskell-process-log t
        haskell-process-auto-import-loaded-modules t
        haskell-process-suggest-remove-import-lines t
        haskell-stylish-on-save t
        haskell-tags-on-save t
	haskell-process-path-stack (concat stack-path "/bin/stack"))
  
  (speedbar-add-supported-extension ".hs")
  
  ;; iterm2 mouse support
  (unless window-system
    (require 'mouse)
    (xterm-mouse-mode t)
    (defun track-mouse (e))
    (setq mouse-sel-mode t))

  ;; direnv mode
  (require 'direnv)
  (direnv-mode)

  ;; jump to window
  (require 'ace-window)
  (global-set-key (kbd "M-o") 'ace-window)

  ;; show parens
  (show-paren-mode 1)

  ;;;; enable flycheck everywhere
  ;;(global-flycheck-mode t)

  ;; 2 space indent for typescript
  (setq-default typescript-indent-level 2)
)
